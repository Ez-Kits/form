// #region field-level
import { useForm } from "@ez-kits/form-solid";
import { zodValidator } from "@ez-kits/form-zod-validator";
import { z } from "zod";

export interface SignInFormValues {
	username: string; // Or email: string;
	password: string;
}

export function SignInForm() {
  const signInForm = useForm<SignInFormValues, z.Schema>({
    validator: zodValidator,
    onSubmit(values) {
      console.log(values);
    },
    onErrors(errors) {
      console.log(errors);
    }
  });

  return <signInForm.Form>
    <form {...signInForm.getFormProps()}>
      <signInForm.Field
        name="username"
        validationSchema={
          z.string().trim().min(1, "Username is required.")
        }
      >
        {({field}) => (
          <label>
            Username:
            <input {...field.getInputProps()} />
          </label>
        )}
      </signInForm.Field>
      <signInForm.Field
       name="password"
        validationSchema={{
          onChange: z.string().trim().min(1, "Password is required."),
        }}
      >
        {({field}) => (
          <label>
            Password:
            <input {...field.getInputProps()} type="password" />
          </label>
        )}
      </signInForm.Field>
      <button type="submit">
        Submit
      </button>
    </form>
  </signInForm.Form>
}
// #endregion field-level

// #region form-level
import { useForm } from "@ez-kits/form-solid";
import { zodValidator } from "@ez-kits/form-zod-validator";
import { z } from "zod";

export interface SignInFormValues {
	username: string; // Or email: string;
	password: string;
}

export function SignInForm() {
  const signInForm = useForm<SignInFormValues, z.Schema>({
    validator: zodValidator,
    validationSchema: {
      onChange: z.object({
        username: z.string().trim().min(1, "Username is required."),
        password: z.string().trim().min(1, "Password is required.")
      }),
    },
    onSubmit(values) {
      console.log(values);
    },
    onErrors(errors) {
      console.log(errors);
    }
  });
  
  return <signInForm.Form>
    <form {...signInForm.getFormProps()}>
      <signInForm.Field name="username">
        {({field}) => (
          <label>
            Username:
            <input {...field.getInputProps()} />
          </label>
        )}
      </signInForm.Field>
      <signInForm.Field name="password">
        {({field}) => (
          <label>
            Password:
            <input {...field.getInputProps()} type="password" />
          </label>
        )}
      </signInForm.Field>
      <button type="submit">
        Submit
      </button>
    </form>
  </signInForm.Form>
}
// #endregion form-level

// #region display-errors
import { useForm, FieldErrors } from "@ez-kits/form-solid";
import { zodValidator } from "@ez-kits/form-zod-validator";
import { z } from "zod";

export interface SignInFormValues {
	username: string; // Or email: string;
	password: string;
}

export function SignInForm() {
  const signInForm = useForm<SignInFormValues, z.Schema>({
    validator: zodValidator,
    validationSchema: {
      onChange: z.object({
        username: z.string().trim().min(1, "Username is required."),
        password: z.string().trim().min(1, "Password is required.")
      }),
    },
    onSubmit(values) {
      console.log(values);
    },
    onErrors(errors) {
      console.log(errors);
    }
  });
  
  return <signInForm.Form>
    <form {...signInForm.getFormProps()}>
      <signInForm.Field name="username">
        {({field}) => (
          <>
            <label>
              Username:
              <input {...field.getInputProps()} />
            </label>
            <FieldErrors>
              {(errors) => errors()
                .flatMap(
                  ({messages}) => messages
                )
                .map((errorMessage) =>
                  <span>{errorMessage}</span>
                )}
            </FieldErrors>
          </>
        )}
      </signInForm.Field>
      <signInForm.Field name="password">
        {({field}) => (
          <>
            <label>
              Password:
              <input {...field.getInputProps()} type="password" />
            </label>
            <FieldErrors>
              {(errors) => errors()
                .flatMap(
                  ({messages}) => messages
                )
                .map((errorMessage) =>
                  <span>{errorMessage}</span>
                )}
            </FieldErrors>
          </>
        )}
      </signInForm.Field>
      <button type="submit">
        Submit
      </button>
    </form>
  </signInForm.Form>
}
// #endregion display-errors
