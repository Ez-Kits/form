// #region field-level
import { useForm, BindingFieldInput } from "@ez-kits/form-react";
import { zodValidator } from "@ez-kits/form-zod-validator";
import { z } from "zod";

export interface SignInFormValues {
	username: string; // Or email: string;
	password: string;
}

export function SignInForm() {
  const signInForm = useForm<SignInFormValues, z.Schema>({
    validator: zodValidator,
    onSubmit(values) {
      console.log(values);
    },
    onErrors(errors) {
      console.log(errors);
    }
  });
  
  return <signInForm.Form>
    <form {...signInForm.getFormProps()}>
      <signInForm.Field
        name="username"
        validationSchema={{
          onChange: z.string().trim().min(1, "Username is required."),
        }}
      >
        <label>
          Username:
          <BindingFieldInput>
            <input />
          </BindingFieldInput>
        </label>
      </signInForm.Field>
      <signInForm.Field
       name="password"
        validationSchema={
          z.string().trim().min(1, "Password is required.")
        }
      >
        <label>
          Password:
          <BindingFieldInput>
            <input type="password" />
          </BindingFieldInput>
        </label>
      </signInForm.Field>
      <button type="submit">
        Submit
      </button>
    </form>
  </signInForm.Form>
}
// #endregion field-level

// #region form-level
import { useForm, BindingFieldInput } from "@ez-kits/form-react";
import { zodValidator } from "@ez-kits/form-zod-validator";
import { z } from "zod";

export interface SignInFormValues {
	username: string; // Or email: string;
	password: string;
}

export function SignInForm() {
  const signInForm = useForm<SignInFormValues, z.Schema>({
    validator: zodValidator,
    validationSchema: validationSchema: {
      onChange: z.object({
        username: z.string().trim().min(1, "Username is required."),
        password: z.string().trim().min(1, "Password is required.")
      }),
    },
    onSubmit(values) {
      console.log(values);
    },
    onErrors(errors) {
      console.log(errors);
    }
  });
  
  return <signInForm.Form>
    <form {...signInForm.getFormProps()}>
      <signInForm.Field name="username">
        <label>
          Username:
          <BindingFieldInput>
            <input />
          </BindingFieldInput>
        </label>
      </signInForm.Field>
      <signInForm.Field name="password">
        <label>
          Password:
          <BindingFieldInput>
            <input type="password" />
          </BindingFieldInput>
        </label>
      </signInForm.Field>
      <button type="submit">
        Submit
      </button>
    </form>
  </signInForm.Form>
}
// #endregion form-level

// #region display-errors
import { useForm, FieldErrors, BindingFieldInput } from "@ez-kits/form-react";
import { zodValidator } from "@ez-kits/form-zod-validator";
import { z } from "zod";

export interface SignInFormValues {
	username: string; // Or email: string;
	password: string;
}

export function SignInForm() {
  const signInForm = useForm<SignInFormValues, z.Schema>({
    validator: zodValidator,
    validationSchema: {
      onChange: z.object({
        username: z.string().trim().min(1, "Username is required."),
        password: z.string().trim().min(1, "Password is required.")
      }),
    },
    onSubmit(values) {
      console.log(values);
    },
    onErrors(errors) {
      console.log(errors);
    }
  });
  
  return <signInForm.Form>
    <form {...signInForm.getFormProps()}>
      <signInForm.Field name="username">
        <label>
          Username:
          <BindingFieldInput>
            <input />
          </BindingFieldInput>
        </label>
        <FieldErrors>
          {(errors) => errors
            .flatMap(
              ({messages}) => messages
            )
            .map((errorMessage) =>
              <span>{errorMessage}</span>
            )}
        </FieldErrors>
      </signInForm.Field>
      <signInForm.Field name="password">
        <label>
          Password:
          <BindingFieldInput>
            <input type="password" />
          </BindingFieldInput>
        </label>
        <FieldErrors>
          {(errors) => errors
            .flatMap(
              ({messages}) => messages
            )
            .map((errorMessage) =>
              <span>{errorMessage}</span>
            )}
        </FieldErrors>
      </signInForm.Field>
      <button type="submit">
        Submit
      </button>
    </form>
  </signInForm.Form>
}
// #endregion display-errors
